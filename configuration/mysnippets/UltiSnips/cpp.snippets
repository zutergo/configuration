## Exception 

# exception boundary 
snippet exception_boundary 
	namespace {

	template <typename ${1:Callable}>
	${2:type} call_and_translate_for_boundary($1&& f) noexcept
	{
		try
		{
			f();
			return ${3:S_OK};
		}
		catch (my_error const& ex)      { return ex.result(); }
		catch (std::bad_alloc const&)   { return E_OUTOFMEM;  }
		catch (...)						{ std::terminate();   }
	}

	} //namespace

	#ifdef __cplusplus
	extern "C" {
	#endif

	${2:type} boundary_function()
	{
		return call_and_translate_for_boundary([&]
		{
			// ... code that may throw ...	
		});
	}

	#ifdef __cplusplus
	}
	#endif
endsnippet

# meyers singleton
snippet singleton
static ${1:Singleton}& instance()
{
	static $1 ${2:s};
	return $2;
}
endsnippet

#gtest fixture
snippet gtestfixture
	/*! \class $1
	*  \brief ${3:Brief class description}
	*
	*  ${4:Detailed description}
	*/
	using namespace testing;
	class ${1:`vim_snippets#Filename('$1', 'name')`} : public ::testing::Test 
	{
	public:
		$1(${2}) {}

	virtual void SetUp() override {

	}

	virtual void TearDown() override {

	}

	};
endsnippet
